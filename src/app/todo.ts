/**
 * Generated by orval v6.9.6 üç∫
 * Do not edit manually.
 * Swagger Microsoft To Do
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@sveltestack/svelte-query';
import type {
	UseQueryOptions,
	UseMutationOptions,
	QueryFunction,
	MutationFunction,
	UseQueryStoreResult,
	QueryKey
} from '@sveltestack/svelte-query';
import type {
	MeTodoListLists,
	ErrorResponse,
	MicrosoftGraphTodoTaskList,
	MicrosoftGraphTodoTaskListBody,
	MeTodoListsListTasks,
	MicrosoftGraphTodoTask,
	MicrosoftGraphTodoTaskBody
} from './models';
import { api } from './api';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary Get lists from me
 */
export const meTodoListLists = (token: string, signal?: AbortSignal) => {
	return api<MeTodoListLists>({
		url: 'me/todo/lists',
		method: 'get',
		headers: { Authorization: `Bearer ${token}` },
		signal
	});
};

export const getMeTodoListListsQueryKey = () => [`/me/todo/lists`];

export type MeTodoListListsQueryResult = NonNullable<Awaited<ReturnType<typeof meTodoListLists>>>;
export type MeTodoListListsQueryError = ErrorResponse;

export const useMeTodoListLists = <
	TData = Awaited<ReturnType<typeof meTodoListLists>>,
	TError = ErrorResponse
>(
	token: string,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof meTodoListLists>>, TError, TData>;
	}
): UseQueryStoreResult<Awaited<ReturnType<typeof meTodoListLists>>, TError, TData, QueryKey> & {
	queryKey: QueryKey;
} => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMeTodoListListsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof meTodoListLists>>> = ({ signal }) =>
		meTodoListLists(token, signal);

	const query = useQuery<Awaited<ReturnType<typeof meTodoListLists>>, TError, TData>(
		queryKey,
		queryFn,
		queryOptions
	) as UseQueryStoreResult<Awaited<ReturnType<typeof meTodoListLists>>, TError, TData, QueryKey> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryKey;

	return query;
};

/**
 * @summary Create new navigation property to lists for me
 */
export const meTodoCreateLists = (
	microsoftGraphTodoTaskListBody: MicrosoftGraphTodoTaskListBody
) => {
	return api<MicrosoftGraphTodoTaskList>({
		url: '/me/todo/lists',
		method: 'post',
		headers: { 'Content-Type': 'application/json' },
		data: microsoftGraphTodoTaskListBody
	});
};

export type MeTodoCreateListsMutationResult = NonNullable<
	Awaited<ReturnType<typeof meTodoCreateLists>>
>;
export type MeTodoCreateListsMutationBody = MicrosoftGraphTodoTaskListBody;
export type MeTodoCreateListsMutationError = ErrorResponse;

export const useMeTodoCreateLists = <TError = ErrorResponse, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof meTodoCreateLists>>,
		TError,
		{ data: MicrosoftGraphTodoTaskListBody },
		TContext
	>;
}) => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof meTodoCreateLists>>,
		{ data: MicrosoftGraphTodoTaskListBody }
	> = (props) => {
		const { data } = props ?? {};

		return meTodoCreateLists(data);
	};

	return useMutation<
		Awaited<ReturnType<typeof meTodoCreateLists>>,
		TError,
		{ data: MicrosoftGraphTodoTaskListBody },
		TContext
	>(mutationFn, mutationOptions);
};

/**
 * @summary Get lists from me
 */
export const meTodoGetLists = (todoTaskListId: string, signal?: AbortSignal) => {
	return api<MicrosoftGraphTodoTaskList>({
		url: `/me/todo/lists/${todoTaskListId}`,
		method: 'get',
		signal
	});
};

export const getMeTodoGetListsQueryKey = (todoTaskListId: string) => [
	`/me/todo/lists/${todoTaskListId}`
];

export type MeTodoGetListsQueryResult = NonNullable<Awaited<ReturnType<typeof meTodoGetLists>>>;
export type MeTodoGetListsQueryError = ErrorResponse;

export const useMeTodoGetLists = <
	TData = Awaited<ReturnType<typeof meTodoGetLists>>,
	TError = ErrorResponse
>(
	todoTaskListId: string,
	options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof meTodoGetLists>>, TError, TData> }
): UseQueryStoreResult<Awaited<ReturnType<typeof meTodoGetLists>>, TError, TData, QueryKey> & {
	queryKey: QueryKey;
} => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMeTodoGetListsQueryKey(todoTaskListId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof meTodoGetLists>>> = ({ signal }) =>
		meTodoGetLists(todoTaskListId, signal);

	const query = useQuery<Awaited<ReturnType<typeof meTodoGetLists>>, TError, TData>(
		queryKey,
		queryFn,
		{ enabled: !!todoTaskListId, ...queryOptions }
	) as UseQueryStoreResult<Awaited<ReturnType<typeof meTodoGetLists>>, TError, TData, QueryKey> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryKey;

	return query;
};

/**
 * @summary Update the navigation property lists in me
 */
export const meTodoUpdateLists = (
	todoTaskListId: string,
	microsoftGraphTodoTaskListBody: MicrosoftGraphTodoTaskListBody
) => {
	return api<void>({
		url: `/me/todo/lists/${todoTaskListId}`,
		method: 'patch',
		headers: { 'Content-Type': 'application/json' },
		data: microsoftGraphTodoTaskListBody
	});
};

export type MeTodoUpdateListsMutationResult = NonNullable<
	Awaited<ReturnType<typeof meTodoUpdateLists>>
>;
export type MeTodoUpdateListsMutationBody = MicrosoftGraphTodoTaskListBody;
export type MeTodoUpdateListsMutationError = ErrorResponse;

export const useMeTodoUpdateLists = <TError = ErrorResponse, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof meTodoUpdateLists>>,
		TError,
		{ todoTaskListId: string; data: MicrosoftGraphTodoTaskListBody },
		TContext
	>;
}) => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof meTodoUpdateLists>>,
		{ todoTaskListId: string; data: MicrosoftGraphTodoTaskListBody }
	> = (props) => {
		const { todoTaskListId, data } = props ?? {};

		return meTodoUpdateLists(todoTaskListId, data);
	};

	return useMutation<
		Awaited<ReturnType<typeof meTodoUpdateLists>>,
		TError,
		{ todoTaskListId: string; data: MicrosoftGraphTodoTaskListBody },
		TContext
	>(mutationFn, mutationOptions);
};

/**
 * @summary Get tasks from me
 */
export const meTodoListsListTasks = (todoTaskListId: string, signal?: AbortSignal) => {
	return api<MeTodoListsListTasks>({
		url: `/me/todo/lists/${todoTaskListId}/tasks`,
		method: 'get',
		signal
	});
};

export const getMeTodoListsListTasksQueryKey = (todoTaskListId: string) => [
	`/me/todo/lists/${todoTaskListId}/tasks`
];

export type MeTodoListsListTasksQueryResult = NonNullable<
	Awaited<ReturnType<typeof meTodoListsListTasks>>
>;
export type MeTodoListsListTasksQueryError = ErrorResponse;

export const useMeTodoListsListTasks = <
	TData = Awaited<ReturnType<typeof meTodoListsListTasks>>,
	TError = ErrorResponse
>(
	todoTaskListId: string,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof meTodoListsListTasks>>, TError, TData>;
	}
): UseQueryStoreResult<
	Awaited<ReturnType<typeof meTodoListsListTasks>>,
	TError,
	TData,
	QueryKey
> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMeTodoListsListTasksQueryKey(todoTaskListId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof meTodoListsListTasks>>> = ({ signal }) =>
		meTodoListsListTasks(todoTaskListId, signal);

	const query = useQuery<Awaited<ReturnType<typeof meTodoListsListTasks>>, TError, TData>(
		queryKey,
		queryFn,
		{ enabled: !!todoTaskListId, ...queryOptions }
	) as UseQueryStoreResult<
		Awaited<ReturnType<typeof meTodoListsListTasks>>,
		TError,
		TData,
		QueryKey
	> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};

/**
 * @summary Create new navigation property to tasks for me
 */
export const meTodoListsCreateTasks = (
	todoTaskListId: string,
	microsoftGraphTodoTaskBody: MicrosoftGraphTodoTaskBody
) => {
	return api<MicrosoftGraphTodoTask>({
		url: `/me/todo/lists/${todoTaskListId}/tasks`,
		method: 'post',
		headers: { 'Content-Type': 'application/json' },
		data: microsoftGraphTodoTaskBody
	});
};

export type MeTodoListsCreateTasksMutationResult = NonNullable<
	Awaited<ReturnType<typeof meTodoListsCreateTasks>>
>;
export type MeTodoListsCreateTasksMutationBody = MicrosoftGraphTodoTaskBody;
export type MeTodoListsCreateTasksMutationError = ErrorResponse;

export const useMeTodoListsCreateTasks = <TError = ErrorResponse, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof meTodoListsCreateTasks>>,
		TError,
		{ todoTaskListId: string; data: MicrosoftGraphTodoTaskBody },
		TContext
	>;
}) => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof meTodoListsCreateTasks>>,
		{ todoTaskListId: string; data: MicrosoftGraphTodoTaskBody }
	> = (props) => {
		const { todoTaskListId, data } = props ?? {};

		return meTodoListsCreateTasks(todoTaskListId, data);
	};

	return useMutation<
		Awaited<ReturnType<typeof meTodoListsCreateTasks>>,
		TError,
		{ todoTaskListId: string; data: MicrosoftGraphTodoTaskBody },
		TContext
	>(mutationFn, mutationOptions);
};
